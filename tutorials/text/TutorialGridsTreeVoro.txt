/**

\page TutorialGridsTreeVoro Building a proper SKIRT dust grid for a spiral galaxy

\image html TutorialGridsTreeVoro_Flux.png
\image html TutorialGridsTreeVoro_Density.png

<i>Illustration on the previous page</i>: surface brightness of the spiral galaxy modeled in this tutorial for
inclinations of 0 degrees (face-on), 86 degrees, and 90 degrees (edge-on).

<i>Illustration above</i>: cut along the \f$xz\f$-plane through the theoretical dust density (top), the dust density
gridded by an octree with 850 000 cells (middle), and the dust density gridded by a Voronoi tesselation with 200 000
cells.

In this tutorial you will experiment with adaptive grids for a spiral galaxy model in \c SKIRT, and learn how
to balance several conflicting requirements to obtain an 'optimal' grid for your purposes.

\section TutorialGridsTreeVoroPre Getting ready

This tutorial assumes that you have completed the introductory <tt>SKIRT</tt> tutorial titled "Monochromatic simulation
of a dusty disk galaxy", or that you have otherwise acquired the working knowlegde introduced there. At the very least,
before starting this tutorial, you should have installed the <tt>SKIRT</tt> code and a FITS file viewer (preferably
DS9).

\section TutorialGridsTreeVoroGrids Spatial grids in SKIRT

In a \c SKIRT simulation, the spatial distributions of the model are defined as part of the StellarSystem (for the
radiation sources) and the DustSystem (for the dusty medium). The distributions may be specified through one or more of
the built-in geometries (Geometry) or it may be imported from a snapshot generated by a hydrodynamical simulation. A
model is considered to be spherically or cylindrically symmetric if all geometric stellar and dust components show the
corresponding symmetry.

\c SKIRT employs a dust grid (DustGrid) to spatially discretize the dusty medium of the model. Properties such as the
dust density and the calculated radiation field are considered to be constant within each cell of the dust grid. It is
thus necessary to provide a sufficiently fine grid in the relevant areas of the model. On the other hand, simulation
runtime and memory requirements scale with the number of cells, so it is often necessary to minimize the number of
cells in less relevant areas of the model.

SKIRT offers a range of dust grid options to help accomplish this balance. The following partial diagram illustrates
the DustGrid class hierarchy (connections starting with a triangle denote inheritance).

\dot "" width=17cm
digraph dustgridhierarchy {
  rankdir=BT;
  node [shape=rect, fontname=Helvetica, fontsize=10];
  edge [arrowhead=empty];

  SphereDustGrid -> DustGrid;
    Sphere1DDustGrid -> SphereDustGrid;
    Sphere2DDustGrid -> SphereDustGrid;
  CylinderDustGrid -> DustGrid;
    Cylinder2DDustGrid -> CylinderDustGrid;
  BoxDustGrid -> DustGrid;
    CartesianDustGrid -> BoxDustGrid;
    OctTreeDustGrid -> BoxDustGrid;
    VoronoiDustGrid -> BoxDustGrid;
}
\enddot

The SphereDustGrid subclasses are defined in spherical coordinates and their configuration space is a sphere centered
on the origin. Likewise, the CylinderDustGrid subclasses are defined in cylindrical coordinates and their configuration
space is a cylinder centered on the vertical coordinate axes. The BoxDustGrid subclasses are defined in Cartesian
coordinate and their configuration space is a cuboid lined up with the coordinate axes (but not necessarily centered
on the origin).

The four classes indicated in the diagram with a blue border implement "regular" dust grids that can be configured with
an arbitrary arrangement of grid points in each dimension (1D, 2D, or 3D). The concept note found at
http://www.skirt.ugent.be/skirt/_spatial_grids.html provides a more in-depth discussion of these grids.

The other classes implement adaptive grids, i.e. grids that can adjust to the actual 3D dust distribution in the
simulation. These grids are the subject of this tutorial. The OctTreeDustGrid offers a hierarchical grid that consists
of recursively subdivided cuboids. The VoronoiDustGrid uses a Voronoi tesselation of space.

\section TutorialGridsTreeVoroSpiral Configuring a spiral galaxy

As a first step, you need to configure a spiral galaxy model that you can then use to study the adaptive grids offered
by \c SKIRT. In a Terminal window, with an appropriate current directory, start <tt>SKIRT</tt> without any command line
arguments. SKIRT responds with a welcome message and starts an interactive session in the terminal window, during which
it will prompt you for all the information describing a particular simulation:

\verbatim
   Welcome to SKIRT v___
   Interactively constructing a simulation...
 ? Enter the name of the ski file to be created: ArmedSpiralTree
\endverbatim

The first question is for the filename of the \em ski file. For this tutorial, enter "ArmedSpiralTree".

\subsection TutorialGridsTreeVoroSpiralSim Type of simulation

\verbatim
   Possible choices for the simulation:
      1. An oligochromatic Monte Carlo simulation
      2. A panchromatic Monte Carlo simulation
 ? Enter one of these numbers [1,2] (1): 1
\endverbatim

In an actual research setting you would probably run a panchromatic simulation to study the absorption, scattering and
thermal emission by the dust over a range of wavelengths. For the purpose of studying the dust grid in this tutorial,
it is best to limit the simulation run-time by using an oligochromatic simulation at a single optical wavelength.

Leave the seed for the random generator to its default value (not shown).

\subsection TutorialGridsTreeVoroSpiralUni Units

\verbatim
   Possible choices for the units system:
      1. SI units
      2. Stellar units (length in AU, distance in pc)
      3. Extragalactic units (length in pc, distance in Mpc)
 ? Enter one of these numbers [1,3] (3): 3
   Possible choices for the output style for flux density and surface brightness:
      1. Neutral: lambda F_lambda = nu F_nu
      2. Wavelength: F_lambda
      3. Frequency: F_nu
 ? Enter one of these numbers [1,3] (1): 3
\endverbatim

You will be configuring a galaxy model, thus it is most natural to select Extragalactic units. Furthermore, select the
frequency output style, expressing integrated fluxes in Jy and surface densities in MJy/sr.

\subsection TutorialGridsTreeVoroSpiralInst Instrument system

\verbatim
   ...
   Possible choices for item #1 in the instruments list:
      1. A basic instrument that outputs the total integrated flux as an SED
      2. A basic instrument that outputs the total flux in every pixel as a data cube
      3. A basic instrument that outputs the total flux as data cube and as SED
         ...
 ? Enter one of these numbers or zero to terminate the list [0,6] (3): 2
 ? Enter the name for this instrument: i00
 ? Enter the distance to the system [0 Mpc,.. Mpc]: 10
 ? Enter the inclination angle of the detector [0 deg,180 deg] (0 deg): 0
 ? Enter the azimuth angle of the detector [-360 deg,360 deg] (0 deg):
 ? Enter the position angle of the detector [-360 deg,360 deg] (0 deg):
 ? Enter the total field of view in the horizontal direction [0 pc,.. pc]: 20 kpc
 ? Enter the number of pixels in the horizontal direction [1,10000] (250): 512
 ? Enter the center of the frame in the horizontal direction [-.. pc,.. pc] (0 pc):
 ? Enter the total field of view in the vertical direction [0 pc,.. pc]: 20 kpc
 ? Enter the number of pixels in the vertical direction [1,10000] (250): 512
 ? Enter the center of the frame in the vertical direction [-.. pc,.. pc] (0 pc):
   Possible choices for item #2 in the instruments list:
      1. A basic instrument that outputs the total integrated flux as an SED
      2. A basic instrument that outputs the total flux in every pixel as a data cube
      3. A basic instrument that outputs the total flux as data cube and as SED
         ...
 ? Enter one of these numbers or zero to terminate the list [0,6] (3): 2
 ? Enter the name for this instrument: i90
 ? Enter the distance to the system [0 Mpc,.. Mpc]: 10
 ? Enter the inclination angle of the detector [0 deg,180 deg] (0 deg): 90
 ? Enter the azimuth angle of the detector [-360 deg,360 deg] (0 deg):
 ? Enter the position angle of the detector [-360 deg,360 deg] (0 deg):
 ? Enter the total field of view in the horizontal direction [0 pc,.. pc]: 20 kpc
 ? Enter the number of pixels in the horizontal direction [1,10000] (250): 512
 ? Enter the center of the frame in the horizontal direction [-.. pc,.. pc] (0 pc):
 ? Enter the total field of view in the vertical direction [0 pc,.. pc]: 10 kpc
 ? Enter the number of pixels in the vertical direction [1,10000] (250): 256
 ? Enter the center of the frame in the vertical direction [-.. pc,.. pc] (0 pc):
   Possible choices for item #3 in the instruments list:
      1. A basic instrument that outputs the total integrated flux as an SED
         ...
 ? Enter one of these numbers or zero to terminate the list [0,6] (3): 0
\endverbatim

Include two basic instruments that output the total flux in every pixel, one at an inclination of 0 degrees (face-on)
and one at an inclination of 90 degrees. The azimuth and position angles can remain at the default value of zero. The
distance of the instrument to the model affects all fluxes with the same factor; use a value of your liking (for
example 10 Mpc). For the face-on view, specify a field of view of \f$20\times 20\f$ kpc centered on the origin, with
\f$512\times 512\f$ pixels. For the edge-on view, the vertical size and number of pixels can be reduced to, say, half
of the horizontal size.

Leave the number of photon packages at the default value of \f$10^{6}\f$ (not shown).

\subsection TutorialGridsTreeVoroSpiralWave Wavelength grid

\verbatim
   ...
 ? Enter the wavelengths [0.0001 micron,1e6 micron]: 0.55
\endverbatim

For this tutorial enter a wavelength 'list' consisting of a single value at the center of the V-band,
\f$\lambda=0.55\,\mu\textrm{m}\f$.

\subsection TutorialGridsTreeVoroSpiralStel Stellar system

\verbatim
   ...
   Possible choices for item #1 in the stellar components list:
      1. A stellar component with a built-in geometry (in an oligochromatic simulation)
         ...
 ? Enter one of these numbers [1,4] (1): 1
   Possible choices for the geometry of the spatial stellar distribution:
      1. A point source geometry
         ...
     38. A decorator that clips another geometry using a cubodial box
     39. A decorator that adds spiral structure to any axisymmetric geometry
     40. A decorator that adds clumpiness to any geometry
         ...
 ? Enter one of these numbers [1,42] (1): 39
   Possible choices for the axisymmetric geometry to be decorated with spiral structure:
      1. An axisymmetric Gaussian geometry
      2. An exponential disk geometry
      3. A broken exponential disk geometry
         ...
 ? Enter one of these numbers [1,11] (1): 2
 ? Enter the radial scale length [0 pc,.. pc]: 1800
 ? Enter the axial scale height [0 pc,.. pc]: 300
 ? Enter the radial truncation length (zero means no truncation) [0 pc,.. pc] (0 pc):
 ? Enter the axial truncation height (zero means no truncation) [0 pc,.. pc] (0 pc):
 ? Enter the radial inner radius [0 pc,.. pc] (0 pc):
 ? Enter the number of spiral arms [1,100] (1): 2
 ? Enter the pitch angle [0 deg,90 deg] (10 deg): 20
 ? Enter the radius zero-point [0 pc,.. pc]: 300
 ? Enter the phase zero-point [0 deg,360 deg] (0 deg):
 ? Enter the weight of the spiral perturbation [0,1]: 0.5
 ? Enter the arm-interarm size ratio index [0,10] (1): 2
 ? Enter the luminosities, one for each wavelength, in solar units [0,..]: 1e11
   Possible choices for item #2 in the stellar components list:
      1. A stellar component with a built-in geometry (in an oligochromatic simulation)
         ...
 ? Enter one of these numbers or zero to terminate the list [0,4] (0): 0
\endverbatim

\c SKIRT offers a set of geometry "decorators" that can be used to modify other geometries in various ways. The list
includes straightforward linear transformations such as translation, rotation and flattening; clipping by a sphere,
cylinder or cuboid; and more complex modifications such as adding spiral arm structure or clumpiness. Decorators can be
nested to arbitrary depths. In the Q&A session, you need to specify the outermost decorator first, followed by any
nested decorators, and finally the original geometry being decorated.

For this tutorial, you will create a spiral galaxy model by applying the spiral structure decorator to a
double-exponential disk geometry. Immediately after selecting a "built-in geometry" stellar component, choose the
spiral structure decorator, and then choose the exponential disk geometry as the geometry to be decorated with spiral
arms. \c SKIRT then requests the properties of the exponential disk geometry, followed by the properties of the
decorator. This ordering is a consequence of the nesting mentioned above.

For the stellar exponential disk, specify a scale length of 1800 pc and a scale height of 300 pc, without any inner or
outer truncation. For the stellar spiral structure, specify 2 arms, a pitch angle of 20 degrees, a radius zero point of
300 pc, a phase zero-point of zero degrees, a perturbation weight of 0.5, and an arm-interarm size ratio index of 2.

Finally, \c SKIRT expects a luminosity value for each of the wavelengths included in the simulation's wavelength grid.
Since you specified a single wavelength, you need to enter a single luminosity value. For this tutorial, specify a
value appropriate for a spiral galaxy, for example \f$10^{11}\f$ solar luminosities.

\subsection TutorialGridsTreeVoroSpiralDust Dust system

\verbatim
   Possible choices for the dust system:
      1. A dust system for use with oligochromatic simulations
 ? Enter one of these numbers or zero to select none [0,1] (1): 1
   Possible choices for the dust distribution:
      1. A dust distribution composed of various dust components
         ...
 ? Enter one of these numbers [1,5] (1): 1
   Possible choices for item #1 in the dust components list:
      1. A dust component
   Automatically selected the only choice: 1
   Possible choices for the geometry of the dust component:
      1. A point source geometry
         ...
     38. A decorator that clips another geometry using a cubodial box
     39. A decorator that adds spiral structure to any axisymmetric geometry
     40. A decorator that adds clumpiness to any geometry
     ...
 ? Enter one of these numbers [1,42] (9): 39
   Possible choices for the axisymmetric geometry to be decorated with spiral structure:
      1. An axisymmetric Gaussian geometry
      2. An exponential disk geometry
      3. A broken exponential disk geometry
         ...
 ? Enter one of these numbers [1,11] (1): 2
 ? Enter the radial scale length [0 pc,.. pc]: 2000
 ? Enter the axial scale height [0 pc,.. pc]: 150
 ? Enter the radial truncation length (zero means no truncation) [0 pc,.. pc] (0 pc):
 ? Enter the axial truncation height (zero means no truncation) [0 pc,.. pc] (0 pc):
 ? Enter the radial inner radius [0 pc,.. pc] (0 pc):
 ? Enter the number of spiral arms [1,100] (1): 2
 ? Enter the pitch angle [0 deg,90 deg] (10 deg): 20
 ? Enter the radius zero-point [0 pc,.. pc]: 300
 ? Enter the phase zero-point [0 deg,360 deg] (0 deg): 10
 ? Enter the weight of the spiral perturbation [0,1]: 0.5
 ? Enter the arm-interarm size ratio index [0,10] (1): 2
\endverbatim

The geometry of the dust distribution can be configured in a very similar way. Select a dust distribution composed of
various (built-in) dust components, choose the spiral structure decorator, and then choose the exponential disk
geometry as the geometry to be decorated. For the dust exponential disk, specify a scale length of 2000 pc and a scale
height of 150 pc, without any inner or outer truncation. For the dust spiral structure, specify 2 arms, a pitch angle
of 20 degrees, a radius zero point of 300 pc, a phase zero-point of 10 degrees, a perturbation weight of 0.5, and an
arm-interarm size ratio index of 2. The dust spiral structure is identical to the stellar spiral structure except for a
slightly different phase (10 degrees instead of zero).

\verbatim
   Possible choices for the dust mixture of the dust component:
      1. A dust mix with average interstellar properties
      2. A Draine & Li (2007) dust mix
      3. A dust mix with mean Zubko properties
         ...
 ? Enter one of these numbers [1,15] (1): 3
 ? Output the optical properties of the dust mix? [yes/no] (yes): no
 ? Output the mean optical properties of the dust mix? [yes/no] (yes): no
   Possible choices for the type of normalization for the dust component:
      1. Normalization by defining the total dust mass
         ...
      7. Normalization by defining the Z-axis optical depth at some wavelength
 ? Enter one of these numbers [1,7] (1): 7
 ? Enter the wavelength at which to specify the optical depth [0.0001 micron,1e6 micron]: 0.55
 ? Enter the Z-axis optical depth at this wavelength [0,..]: 2
   Possible choices for item #2 in the dust components list:
      1. A dust component
 ? Enter one of these numbers or zero to terminate the list [0,1] (1): 0
\endverbatim

For this tutorial, the optical depth of the dust in the model is more important than the precise dust properties.
Select the mean Zubko dust properties with an optical depth normalization along the Z-axis at the wavelength of the
simulation; specify \f$\tau(0.55\,\mu\textrm{m})=2\f$. While there is no harm in writing the (mean) optical properties
of the dust mixture to a text file, you will not need this information, so you can disable this option if you like.

\verbatim
   Possible choices for the dust grid:
      1. A cartesian dust grid
      2. A 3D dust grid with a two-phase medium
      3. An octtree dust grid
      4. A k-d tree (binary tree) dust grid
      5. A tree dust grid derived from a set of particles
      6. A Voronoi dust grid
 ? Enter one of these numbers [1,6] (3): 3
 ? Do you want to output data files for plotting the structure of the grid? [yes/no] (yes): no
 ? Enter the start point of the box in the X direction [-.. pc,.. pc]: -10 kpc
 ? Enter the end point of the box in the X direction [-.. pc,.. pc]: 10 kpc
 ? Enter the start point of the box in the Y direction [-.. pc,.. pc]: -10 kpc
 ? Enter the end point of the box in the Y direction [-.. pc,.. pc]: 10 kpc
 ? Enter the start point of the box in the Z direction [-.. pc,.. pc]: -1 kpc
 ? Enter the end point of the box in the Z direction [-.. pc,.. pc]: +1 kpc
 ? Enter the minimum level of grid refinement (typically 2 to 3) [0,50] (2):
 ? Enter the maximum level of grid refinement (typically 6 to 10) [2,50] (6):
   Possible choices for the search method used for traversing the tree grid:
      1. Top-down (start at root and recursively find appropriate child node)
      2. Neighbor (construct and use neighbor list for each node wall)
      3. Bookkeeping (derive appropriate neighbor through node indices)
 ? Enter one of these numbers [1,3] (2):
 ? Enter the number of random density samples for determining cell subdivision [10,1000] (100):
 ? Enter the maximum mean optical depth for each dust cell [0,100] (0):
 ? Enter the maximum fraction of dust mass contained in each dust cell [0,0.01] (1e-6): 1e-5
 ? Enter the maximum density dispersion, as fraction of the reference density [0,1] (0):
 ? Do you want to use barycentric subdivision? [yes/no] (no):
 ? Enter the number of random density samples for determining cell mass [10,1000] (100):
 ? Do you want to output a data file with convergence checks on the dust system? [yes/no] (yes):
 ? Do you want to output FITS files displaying the dust density distribution? [yes/no] (yes):
   ...
\endverbatim

Consider the spatial discretization of a dust density distribution with a lot of three-dimensional structure and a
large dynamic range. To obtain a rule of thumb for the resolution of a regular dust grid (i.e. a grid with fixed grid
points in each dimension), one could posit that the projection of a grid cell on an instrument should have roughly the
same size as a detector pixel. For a detector with only \f$512\times 512\f$ pixels, this would lead to \f$512^3\approx
1.3\times 10^8\f$ grid cells. However one can usually do a lot better than this. The goal is minimize the total number
of cells (and thus the simulation run time) while still producing the appropriate simulation results. To this end, it
is generally best to place smaller cells in high-density areas (and in areas where the density changes rapidly), and
larger cells in low-density areas. The adaptive grids offered by \c SKIRT serve this purpose. However, you still need
to properly configure the heuristics used by these grids to place their cells.

For example, the octtree grid recursively subdivides the cuboidal domain into 8 cuboidal subcells until each cell
satisfies certain criteria, or until a maximum level of subdivision has been reached. The grid can take into account up
to three different criteria (other than level). The most basic criterion subdivides cells until the dust mass in each
cell is smaller than a given fraction of the total dust mass in the grid. The other criteria look at the optical depth
across each cell and at the dust density dispersion in each cell (a measure of the gradient in the dust density).

To start your study of adaptive grids in this tutorial, select an octtree grid with a domain range of [-10 kpc, 10 kpc]
in both the x and y directions, a range of [-1 kpc, 1 kpc] in the z direction. Leave the other parameters to their
default values with the exception of the maximum fraction of dust mass contained in each dust cell, which you should
set to a more relaxed value of \f$10^{-5}\f$. You will study the effect of these parameter values in the second part of
this tutorial.

Finally the dust system takes a few additional parameters which can be left to their default value (not shown).

\subsection TutorialGridsTreeVoroSpiralRun Running the simulation

After all questions have been answered, \c SKIRT writes out the resulting ski file and terminates. Start \c SKIRT
again, this time specifying the name of the new \em ski file on the command line, to actually perform the simulation.

The output files for this tutorial are similar to those already described for the "Monochromatic simulation of a dusty
disk galaxy" tutorial; please refer to the "Output files" section in that tutorial. Because the geometry in this
simulation is truly three-dimensional (i.e. it has no axial or spherical symmetries), there are now three cuts through
the dust density (one along each of the coordinate planes) rather than two.

\section TutorialGridsTreeVoroGrid Optimizing the dust grid

\subsection TutorialGridsTreeVoroGridAna Initial analysis

Open the file \c ArmedSpiralTree_ds_convergence.dat in a text editor, and note the differences between the expected and
actual values for the total dust mass and the surface densities along each of the coordinate axes. The expected values
are calculated from the analytical expressions for the configured dust geometry; the actual values are determined by
summing over the dust grid cells. With the parameter settings given in the previous section, the discrepancy in the
total dust mass is about 3%, but the surface densities show errors of up to 25%, which is not acceptable. These
discrepancies are caused by a combination of two effects.

First, an exponential disk distribution extends to infinity in all directions, while the dust grid domain is
necessarily finite. Thus, a portion of the dust distribition is cut off. To alleviate this issue, you can enlarge the
dust grid, but that will adversely affect the total number of cells needed to resolve the dust distribution.
Alternatively, you can apply cutoffs to the exponential dust distribution (by specifying these values in the geometry
configuration), which will redistribute the clipped dust mass over the remaining part of the disk. Because the
discrepancy for the total dust mass is limited in this case, it seems that this effect is limited, so no action is
required.

The second cause underlying a convergence discrepancy is the discretization of the theoretical dust distribution by the
cells in the dust grid. Each cell has a uniform density determined by randomly sampling the density over the cell's
volume. If there are too many large cells in areas with substantial density gradients, a discrepancy in the surface
densities will result. To help evaluate this issue, open the theoretical and gridded density cuts along the horizontal
coordinate plane (\c _trhoxy.fits and \c _grhoxy.fits) and along one of the vertical planes (e.g. \c _trhoxz.fits and
\c _grhoxz.fits) in a FITS file viewer such as DS9. It is worth noting that these cuts are always generated with a
fixed pixel resolution of 1024 by 1024, regardless of the actual domain size. This why the vertical cuts look stretched
out: the vertical size is 10 times smaller but is covered by the same number of pixels. In any case, it is immediately
obvious in both cuts that the current grid (with the parameters given in the previous section) does not properly
resolve the model's density distribution.

It is a good idea to also review the surface density maps produced by the instruments, even if simply to verify that
the instrument parameters were entered properly. Even with this limited grid, the mock observations show the expected
overall form. In view of the limited grid resolution, however, we can't trust the results, especially in the central
areas of the model.

Now turn your attention to the simulation log messages (in the console or in the generated log file). Immediately
after constructing the octtree, \c SKIRT reports some statistics on the structure of the tree:

\verbatim
   ...
   Construction of the tree finished.
     Total number of nodes: 127273
     Total number of leaves: 111364
     Number of leaf cells of each level:
       Level 0: 0 cells
       Level 1: 0 cells
       Level 2: 0 cells
       Level 3: 33 cells
       Level 4: 1015 cells
       Level 5: 9996 cells
       Level 6: 100320 cells
   ...
\endverbatim

The total number of nodes includes the actual dust cells as well as any intermediate nodes in the tree that were
subsequently subdivided. The total number of \em leaves specifies the number of actual dust cells in the constructed
dust grid, which is the more relevant number. The subsequent lines list the number of actual dust cells at each
subdivision level. Level 0 corresponds to the complete domain (not subdivided). There are no cells on the most shallow
subdivision levels (0 through 2) because the configuration specifies a minimum level of grid refinement of 2. The list
ends where it does because the configuration specifies a maximum level of grid refinement of 6. It appears that
essentially all of the cells are at level 6, i.e. the deepest allowed subdivision level. This clearly implies that the
subdivision criteria (in this case the maximum mass fraction) are not satisfied for the majority of the dust
cells. In other words, the octtree configuration is not well balanced for this particular model.

Before optimizing the dust grid, it is worth enabling a \em silent feature of \c SKIRT to report some additional
statistics. Questions about silent features are not included in the Q&A session, but can be addressed by directly
editing the ski file. Open the file \c ArmedSpiralTree.ski in a text editor and locate the \c writeCellProperties
attribute of the \c OligoDustSystem element. Adjust the value of this attribute from "false" to "true" and save
your changes.

When you run the simulation with the updated configuration, \c SKIRT will generate an extra file called \c
ArmedSpiralTree_ds_cellprops.dat containing information on each dust cell in the grid (including volume, dust density,
and optical depth). You can use this information to plot histograms of these properties. More important for the
purposes of this tutorial are the optical depth statistics written to the console when this feature is enabled:

\verbatim
   ...
   Writing dust cell properties to ...
     Smallest optical depth: 2.09185e-5
     Largest optical depth:  0.7885
     Average optical depth:  0.0178197
     90 % of the cells have optical depth smaller than: 0.0394449
   ...
\endverbatim

These statistics will come in handy for setting the maximum optical depth criterion as described at the end of the
following section.

\subsection TutorialGridsTreeVoroGridOpt Optimizing the octtree grid

The first step is to set appropriate minimum and maximum subdvision levels. The dust mass in a grid cell (or
equivalently, its average dust density) is estimated by sampling the theoretical dust density in a number of random
locations across the cell volume. In low-density regions of the model, it can happen that a dust concentration in one
corner of a large grid cell is insufficiently sampled to trigger the maximum-mass-fraction criterion, leaving the
overly large cell in place. To avoid this from happening, it is often wise to slightly increase the minimum subdvision
level to a value of 4.

At the other end of the scale, one could use the rule of thumb mentioned earlier: the grid cells must be allowed to
become at least as small as an instrument pixel (after parallel projection). Unfortunately, this provides only an upper
limit on the cell size. The real question is whether the small-scale dust structure is sufficiently resolved in the
grid to enable accurate calculation of the radiation field. For a semi-smooth analytical model such as the one studied
in this tutorial, it seems reasonable to settle for an extra factor of two. With 512 pixels along the instrument field
of view, this leads to a maximum subdvision level of \f$\log_2(2*512)=10\f$.

Open the ski file in a text editor, scroll to the specification of the dust grid near the end of the file, and update
the minimum and maximum subdvision levels as indicated above. Leave the maximum mass fraction at the value of
\f$10^{-5}\f$ and the other two criteria (maximum optical depth and maximum density dispersion) at a value of zero,
which means they are not used. Rerun the simulation and study the log file to evaluate the effect on the distribition
of the dust cells over subdivision levels.

\note While optimizing the octtree grid following the guidance of this section, you may want to temporarily set the
number of photon packages to zero. Alternatively, you can type \<Ctrl\>-C in the terminal window to abort \c SKIRT
as soon as it starts shooting photon packages.

With these settings the grid has slightly over 340,000 cells. There are no cells on levels 9 and 10, however. This
implies that the maximum mass fraction criterion is too relaxed. Change this setting in the ski file to \f$10^{-6}\f$
and rerun the simulation. Now the grid has more than 3.2 million cells, most of which are on levels 8 and 9. This looks
like a well-balanced grid, and for a more realistic model with a lot of small-scale clumpiness it might very well be an
appropriate grid. For this tutorial (with simulations running on laptops) it is surely acceptable to relax the maximum
mass fraction again to an intermediate value. In a more realistic research setting, one would compare the simulation
results for various grids until convergence is reached. For this tutorial, you can simply pick the value of
\f$5\times10^{-6}\f$. This leads to a grid with about 660,000 cells, none of which are on level 10.

You can now further fine-tune this grid by also imposing a maximum optical depth criterion on each cell (measured
across the cell diagonal). If you like, you can plot a histogram of the cell optical depth distribution for the current
grid using the information in the <tt>...cellprops.dat</tt> file (assuming that you enabled this feature; see previous
section). However, the statistics written to the log file are often sufficient. For your last simulation (with min/max
levels 4 & 10 and max mass fraction \f$5\times10^{-6}\f$), most cells have an optical depth lower than 0.07, and some
cells haven an optical depth of up to 0.18. It is beneficial for the grid quality to further subdivide the relatively
small number of cells with the largest optical depths.

For this tutorial, set the maximum optical depth criterion in the ski file to a value of 0.1, and rerun the simulation.
The grid now has about 850,000 grid cells, of which more than 90,000 are on level 10. In other words, the optical depth
criterion added almost 30% extra cells to the grid, and the cell optical depth distribution has a much smaller tail.
Interestingly, the largest optical depth is 0.115, somewhat above the maximum optical depth criterion of 0.1. This
might indicate that some of the cells on level 10 have an optical depth above 0.1, but could not be further subdivided
because they are already at the deepest allowed level. However, this is not the case in this simulation, as can be
easily verified by raising the maximum subdivision level. So what is going on?

In \c SKIRT, the cell mass calculations used for making subdivision decisions while constructing the tree are
completely seperate from the calculations that set the cell mass in the final grid. Because the calculations sample the
theoretical densities at a different set of randomly chosen locations, the results are never quite identical (except
for uniform theoretical densities). The accuracy can be improved by increasing the number of random samples, at the
cost of increased setup times. Note that there are two parameters: one "for determining cell subdivision" and one "for
determining cell mass", both with a default value of 100 samples.

The third criterion, imposing a maximum density dispersion is intended to force cell subdivisions along steep gradients
in the dust density. It is applicable to geometries with clumps or dust walls that don't line up with the coordinate
axes. It is not covered any further in this tutorial.

There are two more settings of the octtree grid that have not been discussed. Both should be left to their default
value, and in future versions of \c SKIRT these options may be removed or become \em silent. The "search method used
for traversing the tree grid" determines the mechanism used to find the consecutive cells on a straight path through
the grid. With the default "Neighbor" method, \c SKIRT constructs and uses a list of neighbors for each cell wall. This
accelerates photon shooting by about 20% compared to the other methods, at the expense of some extra memory usage. The
default value of "no" for the other setting ("use barycentric subdivision") ensures that grid nodes are subdivided in
equal subnodes (i.e. the dividing planes intersect the geometric center of the cell). Research has shown that this
results in the best grid quality, so there is no reason to choose the other possibility.

As a test of your final octtree grid with 850,000 cells, you might want to run the simulation with more photon packages
(e.g. \f$10^7\f$) and review the surface brigthness frames produced by the instruments. You could also add extra
instruments at other inclinations (duplicate one of the instrument specifications in the ski file, and adjust
the values for the new instrument's attributes \c instrumentName and \c inclination).

\subsection TutorialGridsTreeVoroGridVoro About unstructured grids

Hierarchical grids such as the octtree seem to be an obvious choice. It is fairly straightforward to construct an
appropriate grid for any density field, and it is easy to calculate a straight path through the grid, since the
boundaries of the cuboidal cells are lined up with the coordinate axes and each cell has a limited number of neighbors.

Hierarchical grids also have drawbacks, however. First of all, for a given density field and required resolution, an
octtree grid may not be the kind of grid with the least number of cells. To illustrate this, consider a density field
defined by a set of smoothed particles. An octree grid constructed such that each cell encloses at most one particle
usually has over three times more cells than there are particles; i.e., two out of three cells are empty. In contrast,
an unstructured grid based on a Voronoi tessellation of the spatial domain, using the given particles as generating
sites, has exactly the same number of cells as there are particles. While not an issue in many situations, minimizing
the number of cells is sometimes crucial. For example, consider a panchromatic radiative transfer simulation involving
small dust grains in non-LTE conditions. Because each cell stores radiation field data per wavelength bin, memory
requirements are substantial. Moreover, the simulation run time may very well be dominated by the calculation of the
non-LTE heating and re-emission of the dust grains in each cell. In this case, both memory usage and run time scale
roughly linearly with the number of cells.

Furthermore, radiative transfer simulations frequently serve to predict the observable properties of artificial systems
resulting from hydrodynamical simulations. Some recent simulation codes introduce a new scheme that employs a moving
mesh based on a Voronoi tessellation of the spatial domain. This new scheme is claimed to combine the best features of
SPH and the traditional Eulerian approach, and it is becoming increasingly popular. While the output from a moving mesh
code can be re-gridded to a hierarchical grid to perform radiative transfer, the resampling process unavoidably
introduces inaccuracies and represents additional overhead. Thus it may be preferable to perform both aspects of the
simulation (hydrodynamics and radiative transfer) on the same grid.

Finally, calculating a straight path through a 3D Voronoi grid is less daunting than it may seem, so that it becomes
possible to perform accurate and reasonably efficient radiative transfer on unstructured Voronoi grids. While these
grids show a lot of promise, more research is needed concerning the optimal placing of the \em seed points of the
Voronoi tesselation in the context of radiative transfer simulations.

\subsection TutorialGridsTreeVoroGridExp Experimenting with a Voronoi grid

To avoid overwriting your octtree simulation results,
copy the ski file \c ArmedSpiralTree.ski to another file called, for example, \c ArmedSpiralVoro.ski.
Open this new file in a text editor and replace the octtree grid by a Voronoi grid as follows:
 - replace the element name \c OctTreeDustGrid by \c VoronoiDustGrid
 - remove all attributes starting with \c minLevel up to and including \c barycentric
   (leave the domain size attributes \c minX up to \c maxZ in place)
 - add the following attributes: <tt>numParticles="200000" distribution="DustDensity"</tt>

Using these parameters, \c SKIRT will construct a Voronoi grid with 200,000 cells. The locations of the seed points or
\em particles will be sampled from the theoretical dust density distribution. In other words, on average, the cells
will be smaller in high-density regions and larger in low-density regions.

Run this new simulation. Building a Voronoi grid is fairly slow (even for only 200,000 cells), in part because the
process is not parallelized in the current implementation, but this only affects the setup phase. More importantly,
shooting photons through a Voronoi grid is about three times slower than through a (highly optimized) octtree grid. The
Voronoi grid may not be a big win for this monochromatic tutorial simulation, but it might still be beneficial for more
complex panchromatic simulations.

Evaluate the results of the simulation, following more or less the steps described in section \ref
TutorialGridsTreeVoroGridAna. When comparing the simulation results between the octtree grid (with 850,000 cells) and
the Voronoi grid (with 200,000 cells), take note of the following points.

The simulation with the Voronoi grid is not numerically converged. The convergence metrics show larger surface density
discrepencies, and the observed flux density in the central edge-on regions is somewhat higher compared to the octtree
simulation. However, the Voronoi grid has four times fewer cells! Given sufficient time and computing resources,
you might want to increase the number of cells until the simulation results reach convergence.

All octtree cells have the same form factor as the complete domain of the grid, in this case rather flat (the height
is 10 times smaller than the width), while the Voronoi cells don't have any such predisposition. This gives the octtree
an advantage over the Voronoi grid in resolving the central regions of the model. More intelligent placement of the
Voronoi seeds might alleviate this issue.

\c SKIRT already offers a few different schemes for placing the Voronoi seeds randomly (uniform, with a steep central
peak, according to dust density) or deterministically (at SPH particle locations, loaded from file). More research is
needed in this area to develop heuristics for optimal placement.


<b><i>Congratulations, you made it to the end of this tutorial!</i></b>

*/
