/**

\page DevGit Working with git

Although \c git has excellent <a href="http://git-scm.com/book/en/v2">documentation</a>,
<a href="http://git-scm.com/videos">video tutorials</a> and
<a href="https://try.github.io/levels/1/challenges/2">hands on tutorials</a> on its website, explaining
its extensive set of features, most <tt>SKIRT</tt> developers will only need a handfull of these features. 
This page provides a concise list of the most useful commands and "hacks" for using <tt>git</tt>, composited from our own hands-on experience. 
The idea is that <tt>SKIRT</tt> developers who already have some understanding of \c git, can visit this page to recall some desired <tt>git</tt>.

To facilitate finding the right command, the list below provides a quick access to the corresponding topic:

- \ref DevGitFork
- \ref DevGitClonePublic
- \ref DevGitClonePrivate
- \ref DevGitUpdate
- \ref DevGitStatus
- \ref DevGitStage
- \ref DevGitUnstage
- \ref DevGitCommit
- \ref DevGitCreateBranch
- \ref DevGitSwitchBranch
- \ref DevGitLogNice
- \ref DevGitUndo
- \ref DevGitBack
- \ref DevGitStash
- \ref DevGitPushPrivate
- \ref DevGitPullRequest

\section DevGitFork Forking a repository

This is explained in \ref InstallMacGetDevelopPublic.

\section DevGitClonePublic Cloning a public repository

First make a new directory for your project (if necessary):

    cd [wherever you want this directory] [ENTER]
    mkdir [name of the project] [ENTER]

Then, make a git directory:

    cd [name of the project] [ENTER]
    mkdir git [ENTER]
      
If you already have this directory, remove it with the following command:
  
    cd [name of the project] [ENTER]
    rm -rf git [ENTER]
      
and add it again by typing: <tt>mkdir git [ENTER]</tt>.
      
Next, copy the https link of the public repository you want to clone to your clipboard. 

Clone the repository with the following command:

    git clone [PASTE] git
      
where <tt>[PASTE]</tt> is to be replaced with <tt>[CMD] + [V]</tt> on Mac and <tt>[CTRL] + [SHIFT] + [V]</tt> on Ubuntu.

\section DevGitClonePrivate Cloning a personal or private repository

Make sure to add the RSA key of your computer to your GitHub account. This is described in \ref InstallMacGetDevelopPrivate for
a github.ugent.be account, but is analogous for a github.com account. Following the steps up to and including 
"Add the SSH key to your github.ugent account".

After you have waited about 10 minutes since you added your RSA key to your GitHub account, use the following commands to clone
the repository to a certain directory:

    cd [path/to/directory] [ENTER]
    mkdir git [ENTER]
    git clone [PASTE] git [ENTER]

where <tt>[PASTE]</tt> should be replaced with the SSH link of the repository; found on its GitHub webpage:

\image html githubsshlink.png
\image latex githubsshlink.png  

\section DevGitUpdate Updating your local repository

To check whether there are updates to the repository you have cloned on your computer, you can type:

    cd [path/to/directory] [ENTER]
    cd git [ENTER]
    git remote show origin [ENTER]
    
This will print multiple lines of output, but the last line should tell you whether your copy is up to date or not.
If an update is available, use the following command to pull it to your local repository:

    git pull origin [ENTER]

\section DevGitStatus See the status of your local repository

To get an overview of which files you changed, created or deleted since the last commit you can use the following command (in your git directory):

    git status [ENTER]

You will see a complete list of each file that differs from the state of your local repository when you last committed or pulled to it. You see
unstaged files displayed in red and staged files displayed in green. If you created a new directory somewhere within the git directory, it will
appear as one unstaged item (in red). From the moment you stage it (in green), it will appear as a list of the new files within that directory.

\section DevGitStage Staging changes

With git, you are not obliged to commit the entire state of your local repository, involving the changes you have made to every file since the previous commit or pull.
Git features the so-called staging area, where you (virtually) place files you wish to include in your next commit. Consider for example that typing the
<tt>git status</tt> command gives the following output:

\image html gitstatus.png
\image latex gitstatus.png

We see a list of all files that have undergone a change (the upper list) and a list of files that are new or "untracked" (the lower list). Files from the previous commit that are
now deleted would also appear in the upper list. Currently, all file names are displayed in red, meaning that none of them are placed in the staging area. Performing
a <tt>git commit</tt> command now would do nothing. Let's say that in our next commit, we want to include the new (untracked) file "doc/images/gitstatus.png" and the changes in the
file "doc/Part 1 - Developer Guide/Git.txt". We can add these individual files to the staging area by performing the following commands (from within the git directory):

    git add "doc/images/gitstatus.png" [ENTER]
    git add "doc/Part 1 - Developer Guide/Git.txt" [ENTER]

If you deleted a file since the last commit, this deletion can be staged for the next commit with the <tt>rm</tt> command, so:

    git rm "somefile" [ENTER]
    
will remove "somefile" from the repository for every commit to follow.

Performing the <tt>git status</tt> command after adding the two files mentioned above to the staging area would produce the following output:

\image html gitstatus2.png
\image latex gitstatus2.png

The fact that these two files are now listed in green means that the next commit will include the changes in these two files (for commiting see \ref DevGitCommit).

If you decide to add all the modified / new / deleted files to the staging area, you can use the following command:

    git add --all [ENTER]
    
And proceed by performing the commit.

\section DevGitUnstage Unstaging changes

Let's say you have staged changes for the next commit but you changed your mind: you spotted a typo or you decide that you don't want to include the changes of a file 
in the next commit at all. In this case you can always "unstage" the corresponding files; pulling them out of the staging area. Suppose you want to unstage the file "somefile", then the following
command will do the trick:

    git reset HEAD somefile [ENTER]
    
If you do <tt>git status</tt> now, you will see that "somefile" is displayed in red again.

Unstaging also works if you have already altered the file before you thought of unstaging it. Performing the <tt>git reset HEAD</tt> command on the file
will make it seem it was never staged at all. 

\note If you staged a file and modified it afterwards, before commiting, performing a commit will only incorporate the changes present in the file when you added it to the staging area. Therefore,
      after modifying a staged file it will appear twice when doing a <tt>git status</tt>, once in green (denoting the staged version) and once in red (corresponding with the newer, unstaged version). 
      While seemingly confusing at first, this is a powerful git feature, since it allows you to stage some changes in a file, add some other files along with it, alter the first file with some new changes,
      but only commit the earliest changes because it is seems more reasonable seperating the changes in multiple commits. 

\section DevGitCommit Commiting changes

Performing a commit is equivalent to saving a snapshot of a certain state of your local repository into your repository's history. Staged changes can be unstaged again, but once you've commited them
they are (in principle) fixed. The history or timeline of your repository consists of a consecutive series of commits. 

If you staged some files and want to commit them, you can perform the following command:

    git commit -m "Your message"
    
where you can replace the text between quotes by your own personal message (for example: "fixed the bug where it crashes on Ubuntu"). The state of your repository with the staged changes is saved to
your harddisk, and is given a unique hash code to identify it. See \ref DevGitLogNice to see the timeline of your commits with their hash codes visually.

\note It is important to note that performing a commit on your local repository will not automatically result in your commit being included in the remote repository where you pulled from. Adding local commits
      to the timeline of the remote repository is called "pushing".

\section DevGitCreateBranch Creating a new branch

Creating a new branch with as a starting point the last commit of the current branch, is as simple as performing the following command:

    git branch BranchName [ENTER]

You can add as many branches if you like. Typing <tt>git branch</tt> gives you a list of all the branches of your local repository. Note that creating a new branch does not automatically 
brings you to this new branch, this is done by \ref DevGitSwitchBranch.

\section DevGitSwitchBranch Switching between branches

From any branch, with a clean working directory, you can switch to another branch with the following command:

    git checkout BranchName [ENTER]

\note You should NOT switch branches with uncommited changes. Doing so will mess up your working directory!

\section DevGitLogNice Get an nice overview of branches and commits

To view the history of your local repository in a visual way, you can use the following command:

    git log --oneline --decorate --graph --all [ENTER]
    
This will result in a graph like the following:

\image html gitlogoneline.png
\image latex gitlogoneline.png

Pressing [ENTER] will bring you further back in the history of your repository.

\section DevGitUndo Undoing all unstaged changes in your working directory

If you want to undo everything that you modified since the last commit, you can use the following command:

    git reset --hard HEAD [ENTER]
    
\note Keep in mind that this command completely throws away all uncommited changes!

\section DevGitBack Removing the last commit from your local repository

If you are not happy with the last commit, or you performed a pull request but it got rejected, you can undo the last commit with the
following command:

    git reset --hard HEAD~1
    
You can apply this operation several times, to remove more than just the last commit.

\note This command completely erases commits from the history of your local repository. ONLY perform this operation
if you are sure that you will never need the changes of these commits again AND that you only pushed your local repository
to a \em personal remote (so that you are sure no one else cloned from it).  

If you have a personal remote repository where you already pushed the commits to that you removed with the <tt>git reset</tt> command,
git will not allow you to push your changes as in \ref DevGitPushPrivate. After all, your local repository is now behind of the remote
repository (which still contains the removed commits). In order to force the push operation, use the following slightly modified command:

    git push --force remotename branchname [ENTER]
    
Where "remotename" is the alias of your remote repository and "branchname" is the current development branch of your local repository.

\section DevGitStash Stashing changes and re-applying them (after a pull)

    git stash [ENTER]
    git pull [ENTER]
    git stash pop [ENTER]

\section DevGitPushPrivate Pushing to your private repository

To push the changes in the branch "branchname" to the remote repository with the alias "remotename", use the following command:

    git push remotename branchname [ENTER]
    
For example, to push the master branch of your local <tt>SKIRT</tt> repository to a forked <tt>SKIRT</tt> repository named "personal", the
command looks as follows:

    git push personal master

\section DevGitPullRequest Performing a pull request

- Depending on which type of account you use for development, navigate to either the <a href="http://www.github.com">the GitHub website</a> or
  the <a href="http://github.ugent.be">UGent Github page</a> and log in.
- On your account page, click on "repositories" to see a list of your personal remote repositories.
- Click on the name of the forked repository where you pushed your changes to.
- On the page of this repository, click on the green button left of the branch name:

  \image html pullrequest.jpeg
  \image latex pullrequest.jpeg

  You will get an overview over all the commits that will be included in the pull request, i.e. all the commits that are not yet in the repository that you forked from.
  
- Next, click on the green button stating "Create pull request".
- You will be asked to write a title for your pull request (briefly explain what changes that it includes) and optionally write some additional remarks.
  If you press "Create pull request" once again, your request will be sent to administrator of the original repository.

*/
