/**

\page InstallUnix Basic install using the command line (Mac/Unix)

This topic describes how to install and configure the \c SKIRT project using the command line, i.e. without employing
any graphical user interfaces. While this approach may seem challenging to some, it involves the smallest number of
dependencies, lowering the complexity and the risk of failure. The instructions in this topic should be applicable to
any Unix-based system, including Mac OS X, Linux distributions, and other Unix flavors.

This topic contains the following sections:
- \ref InstallUnixTools
- \ref InstallUnixGet
- \ref InstallUnixBuild
- \ref InstallUnixFinal
- \ref InstallUnixResource


\section InstallUnixTools Install the build tools (Mac/Unix)

\subsection InstallUnixToolsVersions Versions

The precise operating system version is not so important, as long as it supports 64-bit applications and you can
install sufficiently recent versions of the build tools as described below (which may be easier on more recent
operating system versions).

It is important to use a C++ compiler with full support for the C++14 standard:
  - On Mac OS X, use Apple Clang v8.0.0 or later.
  - On other Unix systems, use GNU g++ v5.2.1 or later or Intel icc v17.0.2 or later.

Also, you need to use CMake v3.2.2 or later.
Earlier versions of these tools do \em not successfully compile and build the \c SKIRT project.

\subsection InstallUnixToolsMac Mac OS X

On Mac OS X the C++ compiler and \em git command line tools are provided as part of the Xcode development environment,
which is freely available from the App Store. Download and install the latest version, and then launch the Xcode
application at least once to complete the installation of the command line tools.

Verify that the installed compiler has an appropriate version (see \ref InstallUnixToolsVersions) by opening a Terminal
window and entering the following command:

\verbatim
$ clang++ --version"
Apple LLVM version 8.0.0 (clang-800.0.42.1)
...
\endverbatim

Download the most recent CMake for Mac OS X (as a disk image or ".dmg" file) from https://cmake.org/download/ and
perform the installation by opening the disk image and dragging "CMake.app" to the Application folder. Then edit your
login script (<tt>.profile</tt> or <tt>.bash_profile</tt> or equivalent if you are using a shell other than \c bash)
to add the cmake command residing inside "CMake.app" to your system path. For example, add the following line:

\verbatim
export PATH="/Applications/CMake.app/Contents/bin:${PATH}"
\endverbatim

\note On Mac, the <tt>.profile</tt> script is not loaded when there is a <tt>.bash_profile</tt> in your home directory.

Open a new Terminal window (so that the new login script gets loaded) and verify that the installed build tool
has an appropriate version (see \ref InstallUnixToolsVersions) by entering the following command:

\verbatim
$ cmake --version
cmake version 3.5.1
...
\endverbatim

\subsection InstallUnixToolsUbuntu Ubuntu

On Linux distributions such as Ubuntu, you can use <tt>apt-get</tt> to obtain the required tools. Open a
Terminal window and enter the commands listed below.

\verbatim
$ sudo apt-get update
...
$ sudo apt-get install git
...
$ sudo apt-get install cmake
...
$ sudo apt-get install g++
...
\endverbatim

These commands require root access to modify files in the system directories. The "sudo" command takes care of this
assuming that the corresponding privileges are enabled for your account. Enter your password (\em not the root
password!) when asked. Also, for each command, you will be prompted with the question "Do you want to continue? [Y/n]".
Respond affirmative unless you see a good reason not to.

Once the above commands have completed successfully, verify that the installed tools have an appropriate version (see
\ref InstallUnixToolsVersions) by entering the following commands:

\verbatim
$ g++ --version"
g++ (GCC) 6.3.0
...
$ cmake --version
cmake version 3.5.1
...
\endverbatim

\subsection InstallUnixToolsModule Systems using modules

Large multi-node computing systems often use a "module" system that allows each user (or even each batch job) to
"load" a particular version of the tools installed on the system. Contact your system administrator for details.
For example, to load the tools for building the \c SKIRT project one might issue commands like these:

\verbatim
$ module load cmake/3.7.0
$ module load intel_comp/c5/2017
$ icc --version
icc (ICC) 17.0.2 20170213
...
\endverbatim

\subsection InstallUnixToolsOther Other Unix systems

Other Unix systems might support variations on or combination of these methods to install the required tools:
 - Use the standard package manager for your system.
 - Download and run an installer manually.
 - Load the appropriate module.
 - Ask your system manager.


\section InstallUnixGet Get the source code (Mac/Unix)

To install the \c SKIRT project you need to copy the source code to your local file system. First create a directory
hierarchy that will hold the source code, binaries and runtime information. The top-level directory can have any name
(for example \c SKIRT) and can be located anywhere, but the subdirectories should be named as indicated below. Execute
the following commands in a Terminal window to create the \c SKIRT directory in your home directory.

    cd
    mkdir SKIRT
    cd SKIRT
    mkdir release run git

You now need to create a local repository (\em local meaning "on your own computer") by cloning (i.e. copying) one of
the online \c SKIRT code repositories:

- \ref InstallUnixGetPublic, which contains the most recent stable version, and is accessible without restriction.

- \ref InstallUnixGetPrivate, which contains the current development version of the code. This repository may be ahead
of the public repository and some of the implemented features may still be experimental. To access the private
repository you need a UGent login account and specific access rights granted by the core \c SKIRT team.


\subsection InstallUnixGetPublic Use the public code repository

The most recent stable version of the <tt>SKIRT</tt> source code is available from the
<a href="https://github.com/SKIRT/SKIRT8">public SKIRT GitHub repository</a> at <a href="https://github.com">GitHub.com</a>.
While anyone can freely retrieve the code from this repository, only the core \c SKIRT team
has write access to it. To obtain the code, simply enter the following commands in a Terminal window:

    cd ~/SKIRT
    git clone https://github.com/SKIRT/SKIRT8.git git

To update your local copy of the source code after changes were made to the repository from which you cloned it, use:

    cd ~/SKIRT/git
    git pull

\subsection InstallUnixGetPrivate Use the private code repository

The current development version of the <tt>SKIRT</tt> source code is stored in a \em private GitHub repository hosted
on the Ghent University's web servers. You can access this repository only if you have a UGent account \em and the core
<tt>SKIRT</tt> team has specifically granted you read access to the repository. To obtain this access, first go to the
<a href="https://github.ugent.be">github.ugent.be</a> webpage and log in with your UGent account name and password.
This will create your account on the UGent GitHub website. Then ask the <tt>SKIRT</tt> team to grant you access to the
private repository, providing them with your account name (\em not your password, obviously). After your request has
been accepted, follow the instructions below.

<b> Check for existing keys </b>

- Type the following in a Terminal window:

      ls -al ~/.ssh

- If there is a key with extension '.pub' present, skip the next step.

<b> Generate a SSH key </b>

- Again in the Terminal window, enter:

      cd
      ssh-keygen -t rsa -C "yourname@organization.org"

- Accept the default filename (simply press [ENTER])
- Enter a new password
- Enter the same password again
- You should see the following output:

      Your identification has been saved in ~/.ssh/id_rsa.
      Your public key has been saved in ~/.ssh/id_rsa.pub.
      ...

<b> Add the SSH key to your github.ugent account </b>

- In a Terminal window, display your public SSH key by entering:

      cd
      cat ~/.ssh/id_rsa.pub

- Navigate to <a href="https://github.ugent.be">github.ugent.be</a> and log in.
- Click your username or picture (top right) and select "Your profile" in the dropdown menu.
- Press 'Edit profile' in the lefthand column.
- Go to 'SSH and GPG keys'.
- Press 'New SSH key'.
- As the Title, enter something that identifies your computer (for example: Personal MacBook).
- Next, go back to the Terminal window and copy your public SSH key (the complete output of the \c cat command)
- Back on the website, paste in the 'Key' text field.
- Click 'Add key'.
- After adding your key, you should wait a few minutes before continuing with the next step.

<b> Clone the private repository </b>

- In a Terminal window enter the following commands:

      cd ~/SKIRT
      git clone git@github.ugent.be:SKIRT/SKIRT8.git git

- You will see the following output:

      The authenticity of host 'github.ugent.be (XXX.XXX.XXX.XX)' can't be established.
      RSA key fingerprint is XX:XX:XX:XX:XX ... .
      Are you sure you want to continue connecting (yes/no)?

- Acknowledge by entering "yes"

To update your local copy of the source code after changes were made to the repository from which you cloned it, use:

      cd ~/SKIRT/git
      git pull


\section InstallUnixBuild Configure and build the project (Mac/Unix)

\subsection InstallUnixBuildFirst Building for the first time

The \c SKIRT project code includes two \c bash shell scripts to help configuring and building \c SKIRT
from the source code in the git directory. Before you use these script for the first time, you may need
to make them executable:

    cd ~/SKIRT/git
    chmod +rx configSKIRT.sh
    chmod +rx makeSKIRT.sh

To build \c SKIRT for the first time, using default build options, enter the following commands:

    cd ~/SKIRT/git
    ./makeSKIRT.sh

If all goes well, you should see output similar to this:

\verbatim
Using /Applications/CMake.app/Contents/bin/cmake to generate build files

-- The C compiler identification is AppleClang 8.0.0.8000042
-- The CXX compiler identification is AppleClang 8.0.0.8000042
...
BUILD_DOX_STYLE:BOOL=OFF
BUILD_FIT_SKIRT:BOOL=OFF
BUILD_MAKE_UP:BOOL=OFF
BUILD_SKIRT:BOOL=ON
BUILD_SMILE_SHAPES:BOOL=OFF
BUILD_SMILE_TOOL:BOOL=OFF
BUILD_WITH_MPI:BOOL=OFF
CMAKE_BUILD_TYPE:STRING=Release
CMAKE_INSTALL_PREFIX:PATH=/usr/local
GIT_EXECUTABLE:FILEPATH=/usr/bin/git

Scanning dependencies of target timestamp
[  0%] Built target timestamp
Scanning dependencies of target build
[  0%] Building CXX object SMILE/build/CMakeFiles/build.dir/BuildInfo.cpp.o
[  0%] Linking CXX static library libbuild.a
[  0%] Built target build
Scanning dependencies of target fundamentals
[  1%] Building CXX object SMILE/fundamentals/CMakeFiles/fundamentals.dir/BooleanExpression.cpp.o
[  1%] Building CXX object SMILE/fundamentals/CMakeFiles/fundamentals.dir/CommandLineArguments.cpp.o
...
Scanning dependencies of target skirt
[100%] Building CXX object SKIRT/main/CMakeFiles/skirt.dir/SkirtCommandLineHandler.cpp.o
[100%] Building CXX object SKIRT/main/CMakeFiles/skirt.dir/SkirtMain.cpp.o
[100%] Linking CXX executable skirt
[100%] Built target skirt
\endverbatim

If things do not go so well, you'll need to take corrective action depending on the problem. The table below
provides some hints; if the problem persists please contact the \c SKIRT team.

<TABLE>
<TR><TH>Problem</TH>  <TH>Cause and corrective action</TH></TR>
<TR><TD>There is no cmake in the default path</TD>
    <TD>The \c CMake build tool is not installed, or its location has not been added to the default system PATH;
        see \ref InstallUnixTools</TD> </TR>
<TR><TD>CMake version is too old</TD>
    <TD>The default system PATH points to an older version of the \c CMake build tool; verify the installation
        with "which cmake" and "cmake --version"</TD> </TR>
<TR><TD>No compiler is found, or compiler identification is not what you expected</TD>
    <TD>\c CMake looks for compilers in the default system PATH in some complicated order, it might find an old
        compiler version, or it might choose the GNU compiler while you want to use the Intel compiler;
        in this case explicitly specify the compiler; see \ref InstallUnixBuildSelectComp</TD> </TR>
<TR><TD>Compiler reports an error on one or more source files</TD>
    <TD>Verify that your compiler version fully supports C++14; see \ref InstallUnixToolsVersions.
        If the compiler is sufficiently recent, there might be a platform-specific issue with the code.</TD> </TR>
</TABLE>

\subsection InstallUnixBuildSelectComp Selecting the compiler

If the compiler identification listed at the start of the \c makeSKIRT procedure does not match your expectations,
or no compiler is found at all, you need to specify the compiler explicitly through the \c configSKIRT script.

The first step is to figure out the full absolute path of the appropriate compiler executable. Sometimes this is easy.
For example, on systems that have the Intel compiler installed in addition to the GNU compiler, \c CMake will usually
select the GNU compiler while you may want it to use the Intel compiler. To discover the path of the Intel compiler,
enter the command "which icc". In other cases, you may need to browse around on your file system to locate the
compiler executable.

Once you have the compiler path, you can resolve the problem by entering the following commands, where you replace
\<path\> by the full absolute path of the compiler executable:

\verbatim
cd ~/SKIRT/git
./configSKIRT.sh CMAKE_C_COMPILER=<path> CMAKE_CXX_COMPILER=<path>
./makeSKIRT.sh
\endverbatim

\note You need to configure both the plain C compiler and the C++ compiler, although in most cases you can use the
same path (most modern compilers automatically deduce the correct language flavor).

This should cause \c CMake to select the specified compiler and list the corresponding compiler identification.
The configuration state is stored as a file residing in the \c SKIRT/release directory. As long as you don't remove
that file, the configuration state remains persistent. Conversely, if the configuration state gets messed up, you
can reset things by removing the complete contents of the \c SKIRT/release directory.

\subsection InstallUnixBuildOptions Adjusting build options

By default, the procedure described above builds just the \c SKIRT command line program. To build additional programs
such as \c FitSKIRT, or to enable capabilities such as multi-processing, you need to adjust the corresponding
build options through the \c configureSKIRT script. For a list of build options, see \ref InstallOptions.

For example, to build \c FitSKIRT in addition to \c SKIRT, enter the following command (still in the \c git directory):

    ./configSKIRT.sh BUILD_FIT_SKIRT=ON

In some cases, you need to repeat this process:

  - A new option may appear because you enabled the options on which it depends. For example, after you enable the
    BUILD_FIT_SKIRT option, the BUILD_WITH_FFT appears with default value OFF. To enable this dependent option,
    you need a second round of adjustment.

  - \c CMake may fail to locate the appropriate paths for an option you enabled. To stay with the same example,
    after you enable the BUILD_WITH_FFT option, two new variables (FFT_INCLUDES and FFT_LIBRARIES) appear. If
    there is a problem with the paths suggested by \c CMake, you need yet another round of adjustment to override
    these values manually.

The configuration state is stored as a file residing in the \c SKIRT/release directory. As long as you don't remove
that file, the configuration state remains persistent. Conversely, if the configuration state gets messed up, you
can reset things by removing the complete contents of the \c SKIRT/release directory.


\section InstallUnixFinal Finalize the installation (Mac/Unix)

To provide easy access to the executables in the \c SKIRT project, edit your login script (<tt>.profile</tt> or
<tt>.bash_profile</tt> or equivalent if you are using a shell other than \c bash) to add the appropriate \c SKIRT
executable paths to your system path. For example, add the following line:

\verbatim
export PATH="/Users/pcamps/SKIRT/release/SKIRT/main:/Users/pcamps/SKIRT/release/FitSKIRT/main:${PATH}"
\endverbatim

\note On Mac, the <tt>.profile</tt> script is not loaded when there is a <tt>.bash_profile</tt> in your home directory.

To verify your installation of the \c SKIRT project, close all Terminal windows and launch a new one, so that your
updated login script gets executed. Enter the command "skirt" without any command-line arguments. If the \c SKIRT
project has been successfully installed, you should see output similar to this:

\verbatim
$ skirt
19/04/2017 11:23:24.073   Welcome to SKIRT v8.0 (git a4a912f built on 12/04/2017 at 11:06:29)
19/04/2017 11:23:24.073   Running on obiwan.ugent.be for pcamps
19/04/2017 11:23:24.073   Interactively constructing a simulation...
19/04/2017 11:23:24.073 ? Enter the name of the ski file to be created:
\endverbatim

You can follow the instructions in the Terminal window to create a skirt parameter file or press [CTRL] + C to exit the
program. For more information on using \c SKIRT, please refer to the \ref UserGuide.

\section InstallUnixResource Downloading additional SKIRT resource files

As a general rule, the \c SKIRT code repository includes the resource data files used by any of its classes. However,
in some cases, the size of the file(s) prohibits including the resource in the code repository. For example, the files
specifying the optical dust properties with support for polarization (i.e. the scattering matrix coefficients) are
about 250 MB each.

To download these additional "external" resources from the \c SKIRT web site, go to your \c SKIRT/git directory
and execute the "downloadextdat.sh" bash shell script:

    cd ~/SKIRT/git
    ./downloadextdat.sh

The resource files will be downloaded and placed in the \c SKIRT/extdat directory next to your \c SKIRT/git directory.

*/
