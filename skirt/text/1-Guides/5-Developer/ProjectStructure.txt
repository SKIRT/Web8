/**

\page DevProjectStruct Structure of the code

\section DevStructDirs Directory structure

The \c SKIRT project source code is contained in an online repository and can be obtained as described in the \ref
InstallationGuide. The files are organized in a nested directory hierarchy; your local copy may look as follows:

\verbatim
~/SKIRT
    debug
    git
        Docs
        FitSKIRT
        MakeUp
        SKIRT
        SMILE
    release
        ...
        FitSKIRT
        MakeUp
        SKIRT
        ...
    run
\endverbatim

The \c git directory contains an identical copy of the online \c SKIRT repository; it is usually placed inside a local
directory called \c SKIRT in your home directory. The \c debug and \c release directories contain the result of
building the \c SKIRT project, including the executables. Always use the \c release build for "production" simulations;
the code in the \c debug build is not optimized and runs several times slower. The \c run directory may contain
input/output files involved in actually running \c SKIRT. The information in these last three directories obviously
does not belong in the source code repository, which is why these directories are \em not inside the \c git directory.

Immediately inside the \c git directory reside the main project file \c CMakeLists.txt and some shell scripts used for
building \c SKIRT or its documentation. For more information, see the \ref InstallationGuide and \ref DevBuildDocs.

The highest-level \c git subdirectories (\c FitSKIRT, \c MakeUp, \c SKIRT, ...) each represent a \em subproject of the
\c SKIRT project. In their turn, they have nested subdirectories organizing the source code and related support files
into \em modules.

\section DevStructModules Subprojects and modules

\image html ProjectStructure.png

The above diagram lists the various subprojects and modules in the \c SKIRT project. Boxes with a gray background
depict a project or subproject; the other boxes depict a module. A colored border indicates that the module contains
supporting data files rather than source code. Most module boxes represent a static library that can be used by other
modules; those with a symbol in the upper right corner represent an executable program.

The symbols in the upper left corner of each module box indicate internal and external dependencies. Refer to the
diagram legend for details. Note that there are no two-way or circular dependencies between modules. When adjusting or
extending the code, it is important not to inadvertently create new inter-module dependencies. In any case, circular
dependencies between modules are not allowed.

The four key subprojects of the \c SKIRT project are introduced in the \ref ProjectOverview. Below is a brief
description of the modules in these subprojects, and in the remaining \c Docs subproject. The modules are listed per
subproject in the order of appearance in the above diagram.

\c SMILE subproject (also see \ref DevSmileProject):

 - \c build -- This small library allows retrieving versioning information about the current build. It cooperates
   with the build system to provide information such as the time when the current executable was built.
 - \c fundamentals -- This library offers generic functionality that is used by other modules throughout the project,
   including platform-independent system interaction, basic string handling, and low-level XML processing.
 - \c schema -- This library contains the meat of the SMILE functionality, including facilities for processing SMILE
   schemas, representing SMILE datasets in memory, and performing introspection on C++ classes in SMILE client code.
 - \c serialize -- This library uses the capabilities of the \c schema module to serialize and deserialize SMILE data
   sets, and to resurrect a client's C++ object hierarchy from a SMILE dataset.
 - \c wizard -- This library implements the graphical wizard that allows creating or editing a SMILE dataset,
   given the corresponding SMILE schema file.
 - \c smiletool -- This command-line tool can work with SMILE datasets corresponding to a given SMILE schema file.
   The tool can conduct a text-based question and answer session to create a dataset, produce a LaTeX description
   for an existing dataset, and more.
 - \c shapes -- This command-line program serves as an example of the typical SMILE library use case (similar to
   but a lot less complex than \c SKIRT and \c FitSKIRT).

\c SKIRT subproject (also see the \ref UserSKIRT):

 - \c data -- This module includes the resource data files loaded by various classes in the <tt>SKIRT/core</tt> module.
 - \c fitsio -- This library provides input/output capabilities for FITS files. It contains a subset of the source
   files offered in tarball cfitsio3360.tar.gz downloaded from NASA's HEASARC software site
   at http://heasarc.gsfc.nasa.gov/fitsio/fitsio.html . No changes were made to any of the source files.
 - \c voro -- This library provides support for building Voronoi meshes.
   The source code is adapted from the Voro++ library written by Chris H. Rycroft (LBL / UC Berkeley)
   which can be downloaded at http://math.lbl.gov/voro++/about.html .
   For more information see \ref VoroPlusPlus.
 - \c mpi -- This library encapsulates any and all invocations of the Message Passing Interface (MPI) optionally
   linked in as an external library. Concentrating all MPI calls in a single module allows the code in other modules
   to be compiled without the MPI extra's.
 - \c utils -- This library provides some basic <tt>SKIRT</tt>-specific functionality that does \em not depend on
   the SimulationItem class.
 - \c core -- This library provides the core \c SKIRT functionality for setting up and performing a simulation. It
   includes all SimulationItem subclasses and the corresponding registry.
 - \c main -- This is the \c SKIRT console application. It handles the command line arguments and links in everything
   else from other libraries.

\c FitSKIRT subproject (also see the \ref UserFitSKIRT):

 - \c galib -- This library provides support for genetic algorithm mechanisms. The source code is adapted from
   Matthew Wall's GAlib (c) 1995 MIT which can be downloaded at http://lancet.mit.edu/ga/GAlib.html .
 - \c convolution -- If the corresponding build option is enabled, this library implements the convolution of an image
   frame with an arbitrary kernel using the fast-fourier transform algorithm provided by the external FFTW library.
   If the build option is turned off, the module offers a dummy no-op interface instead.
 - \c core -- This library provides the core \c FitSKIRT functionality, connecting the genetic algorithm mechanism
   with the \c SKIRT simulation capabilities.
 - \c main -- This is the \c FitSKIRT console application. It handles the command line arguments and links in
   everything else from other libraries.

\c MakeUp subproject (also see the \ref UserMakeUp):

 - \c main -- This desktop program displays a graphical user interface for editing configuration files. The code
   in this module essentially invokes the functionality provided by the wizard module in the \c SMILE project.

\c Docs subproject:

 - \c templates -- This module includes some developer support data files, such as the license template to be included
   in every source file.
 - \c doxygen -- This module includes some data files to support the generation of reference documentation from the
   project source code through the Doxygen utility. See \c DevBuildDocs for more information.
 - \c doxstyle -- This console application can be invoked from the Qt Creator code editor to help streamline
   Doxygen documentation blocks, as explained in \ref DevCodingStyleFormat. The code in this module depends only on the
   \c fundamentals module in the \c SMILE subproject; it is included here so that it would be easily available to
   any \c SKIRT developer.


\section DevStructSimItems Simulation items

A complete simulation is represented in \c SKIRT as run-time hierarchy of objects (instances of various C++ classes)
called <em>simulation items</em>. The following diagram presents a simple run-time simulation hierarchy
(a connection starting with a diamond loosely means "A owns B"):

\dot
digraph runtime {
    rankdir=LR;
    node [shape=rect, fontname=Helvetica, fontsize=10];
    edge [dir=back arrowtail=ediamond];

    OligoMonteCarloSimulation [label="OligoMonteCarloSimulation" URL="\ref OligoMonteCarloSimulation"];
      Parallel [label="Parallel" URL="\ref Parallel"];
      FilePaths [label="FilePaths" URL="\ref FilePaths"];
      Console [label="Console" URL="\ref Console"];
      Random [label="Random" URL="\ref Random"];
      ExtragalacticUnits [label="ExtragalacticUnits" URL="\ref ExtragalacticUnits"];
      OligoWavelengthGrid [label="OligoWavelengthGrid" URL="\ref OligoWavelengthGrid"];
      StellarSystem [label="StellarSystem" URL="\ref StellarSystem"];
        SPHStellarComp [label="SPHStellarComp" URL="\ref SPHStellarComp"];
      OligoDustSystem [label="OligoDustSystem" URL="\ref OligoDustSystem"];
        SPHDustDistribution [label="SPHDustDistribution" URL="\ref SPHDustDistribution"];
          InterstellarDustMix [label="InterstellarDustMix" URL="\ref InterstellarDustMix"];
        OctTreeDustGrid [label="OctTreeDustGrid" URL="\ref OctTreeDustGrid"];
      InstrumentSystem [label="InstrumentSystem" URL="\ref InstrumentSystem"];
        SimpleInstrument_1 [label="SimpleInstrument_1" URL="\ref SimpleInstrument"];
        SimpleInstrument_2 [label="SimpleInstrument_2" URL="\ref SimpleInstrument"];
        SimpleInstrument_3 [label="SimpleInstrument_3" URL="\ref SimpleInstrument"];

      OligoMonteCarloSimulation -> Parallel;
      OligoMonteCarloSimulation -> FilePaths;
      OligoMonteCarloSimulation -> Console;
      OligoMonteCarloSimulation -> Random;
      OligoMonteCarloSimulation -> ExtragalacticUnits;
      OligoMonteCarloSimulation -> OligoWavelengthGrid;
      OligoMonteCarloSimulation -> StellarSystem;
        StellarSystem -> SPHStellarComp;
      OligoMonteCarloSimulation -> OligoDustSystem;
        OligoDustSystem -> SPHDustDistribution;
          SPHDustDistribution -> InterstellarDustMix;
        OligoDustSystem -> OctTreeDustGrid;
      OligoMonteCarloSimulation -> InstrumentSystem;
        InstrumentSystem -> SimpleInstrument_1;
        InstrumentSystem -> SimpleInstrument_2;
        InstrumentSystem -> SimpleInstrument_3;
}
\enddot

A run-time simulation hierarchy includes the following information:
  - the configuration of the simulation, including all parameters, represented by a combination of:
      - the structural makeup of the hierarchy
      - the selection of the type of simulation items actually included (e.g. OctTreeDustGrid rather than
        another type of dust grid)
      - the properties of the various simulation items (not shown in the diagram)
  - the functionality needed to perform the simulation and output the results, embodied in the code associated with
    each specific simulation item class
  - the run-time data needed and/or generated while performing the simulation, represented by data members in
    each of the simulation items.

Multiple run-time simulation hierarchies can co-exist and are independent of each other. There is no shared or
global data, except when accessing truly global resources (such as the console) which are protected by
appropriate locking mechanisms.

The contents of a ski file mimics the corresponding run-time simulation hierarchy (see \ref UserSkirtParamStruct) with
the exception of the Parallel, FilePaths and Log (Console) objects, which are configured by the code in the
<tt>SKIRT/main</tt> module as determined by the command line arguments.

\section DevStructSimClasses Simulation item classes

A simulation item is an instance of a C++ class that inherits the SimulationItem class defined in the
<tt>SKIRT/core</tt> module. The following diagram presents a tiny portion of the inheritance tree:

\dot
digraph inheritance {
    rankdir=BT;
    node [shape=rect, fontname=Helvetica, fontsize=10];
    edge [arrowhead=empty];

    SimulationItem [label="SimulationItem" URL="\ref SimulationItem"];
      StellarComp [label="StellarComp" URL="\ref StellarComp"];
        SPHStellarComp [label="SPHStellarComp" URL="\ref SPHStellarComp"];
        OtherStellarComp [label="..."];
      Simulation [label="Simulation" URL="\ref Simulation"];
        MonteCarloSimulation [label="MonteCarloSimulation" URL="\ref MonteCarloSimulation"];
          OligoMonteCarloSimulation [label="OligoMonteCarloSimulation" URL="\ref OligoMonteCarloSimulation"];
          OtherMonteCarloSimulation [label="..."];
      Log [label="Log" URL="\ref Log"];
        Console [label="Console" URL="\ref Console"];
        FileLog [label="FileLog" URL="\ref FileLog"];

      StellarComp -> SimulationItem;
        SPHStellarComp -> StellarComp;
        OtherStellarComp -> StellarComp;
      Simulation -> SimulationItem;
        MonteCarloSimulation -> Simulation;
          OligoMonteCarloSimulation -> MonteCarloSimulation;
          OtherMonteCarloSimulation -> MonteCarloSimulation;
      Log -> SimulationItem;
        Console -> Log;
        FileLog -> Log;
}
\enddot

The leaf nodes represent concrete simulation item classes. Instances of these classes can be part of a run-time
simulation hierarchy. The non-leaf nodes represent abstract simulation item classes that can't be instantiated.
As a result, simulation items form a compile-time class hierarchy through inheritance (with the SimulationItem class
at the top), and a run-time object hierarchy through pointers (with an instance of a Simulation subclass at the top).

The basic interface inherited from SimulationItem facilitates common functionality for working with simulation items.
For example, the SimulationItem::find() function allows locating a simulation item in a run-time simulation hierarchy
simply providing its class name. Also, the Simulation class cooperates with the SimulationItem interface to
setup and run a complete simulation.

Furthermore, SimulationItem subclasses must provide appropriate metadata for use by the \c SMILE library.
The \c SMILE capabilities then support various interfaces to simulation items, including:

 - Creating a simulation hierarchy based on user responses during an interactive Q&A session.
 - Saving or loading a simulation hierarchy to and from a parameter file (in XML format).
 - Generating a human-readable report summarizing the simulation parameters for a simulation hierarchy.

The \c SMILE code has no built-in knowledge about simulation item classes; it self-adjusts to the metadata provided in
SimulationItem subclasses. This means that:

 - All information about a simulation item is defined in a single place.
 - When adding a new type of simulation item, there is no need to add code for each of the interfaces separately;
   the same metadata is used by all interfaces.
 - New interfaces (such as a graphical user interface) can be added without changing any of the
   existing code, and without duplicating information about specific simulation item classes.

For more details on adding the appropriate information to simulation item classes, see \ref DevCreateSimItems.

*/
